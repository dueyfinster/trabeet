#!/bin/bash

CONFIG_DIR=/root/.config/transmission
SETTINGS=$CONFIG_DIR/settings.json
TRANSMISSION=/usr/bin/transmission-daemon
TRANSMISSION_CONF="-f --config-dir /root/.config/transmission-daemon --log-debug --no-portmap"
TRANS_RSS=/usr/local/bin/transmission-rss
TRANS_RSS_CONF=/root/.config/transmission-rss/config.yml
WEBHOOK=/usr/bin/webhook
WEBHOOK_CONF=/opt/webhook/hooks.json.tmpl

# Start the first process
$WEBHOOK -template -hooks $WEBHOOK_CONF -verbose &
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start webhook: $status"
  exit $status
fi

# Start the second process
$TRANSMISSION $TRANSMISSION_CONF &
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start transmission: $status"
  exit $status
fi

# Start the third process
sed -i -- "s/RSS_URL/$RSS_URL/g" "$TRANS_RSS_CONF"
$TRANS_RSS -c $TRANS_RSS_CONF &
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start transmission-rss: $status"
  exit $status
fi

echo "$WEB_USER:$WEB_PASSWD" > /etc/nginx/htpasswd
nginx
status=$?
if [ $status -ne 0 ]; then
  echo "Failed to start nginx: $status"
  exit $status
fi

# Naive check runs checks once a minute to see if either of the processes exited.
# This illustrates part of the heavy lifting you need to do if you want to run
# more than one service in a container. The container exits with an error
# if it detects that either of the processes has exited.
# Otherwise it loops forever, waking up every 60 seconds

while sleep 60; do
  ps aux |grep webhook |grep -q -v grep
  PROCESS_1_STATUS=$?
  ps aux |grep nginx |grep -q -v grep
  PROCESS_2_STATUS=$?
  ps aux |grep transmission |grep -q -v grep
  PROCESS_3_STATUS=$?
  # If the greps above find anything, they exit with 0 status
  # If they are not both 0, then something is wrong
  if [ $PROCESS_1_STATUS -ne 0 -o $PROCESS_2_STATUS -ne 0 -o $PROCESS_3_STATUS -ne 0 ]; then
    echo "One of the processes has already exited."
    exit 1
  fi
done
